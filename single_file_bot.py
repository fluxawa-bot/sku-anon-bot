# single_file_bot.py
import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ø–æ–ª–æ–∂–∏ .env —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º (–Ω–µ –ø—É—à—å .env –≤ GitHub)
load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise RuntimeError("API_TOKEN not set. Add it to .env (local) or to Scalingo env vars.")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç, *{name}*!\n"
    "–Ø ‚Äî *–∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç* –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ Kozybayev University üéì\n\n"
    "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –æ–±—â–∞—Ç—å—Å—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π.\n"
    "–ù–∞–∂–º–∏ ¬´üéØ *–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞*¬ª ‚Äî –∏ —è —Å–æ–µ–¥–∏–Ω—é —Ç–µ–±—è —Å –¥—Ä—É–≥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–º.\n\n"
    "‚èπ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç –∏–ª–∏ –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–æ–π ¬´*–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å*¬ª.\n\n"
    "‚ú® –£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤!"
)

# –æ—á–µ—Ä–µ–¥—å –∏ –ø–∞—Ä—ã
waiting = []
active_chats = {}

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéØ –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")],
        [KeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")]
    ],
    resize_keyboard=True
)


@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    name = message.from_user.first_name or "—Å—Ç—É–¥–µ–Ω—Ç"
    text = WELCOME_TEXT.format(name=name)
    await message.answer(text, reply_markup=main_kb, parse_mode="Markdown")


@dp.message(F.text == "üéØ –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def cmd_search(message: Message):
    user_id = message.from_user.id
    if user_id in active_chats:
        await message.answer("‚ùó –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ù–∞–∂–º–∏ ‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.", reply_markup=main_kb)
        return

    if waiting and waiting[0] != user_id:
        partner_id = waiting.pop(0)
        active_chats[user_id] = partner_id
        active_chats[partner_id] = user_id
        await bot.send_message(partner_id, "‚úÖ –ù–∞—à–µ–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å ‚úâÔ∏è", reply_markup=main_kb)
        await message.answer("‚úÖ –ù–∞—à–µ–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å ‚úâÔ∏è", reply_markup=main_kb)
    else:
        if user_id not in waiting:
            waiting.append(user_id)
            await message.answer("‚è≥ –ñ–¥–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=main_kb)


@dp.message(F.text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
async def cmd_stop(message: Message):
    user_id = message.from_user.id
    if user_id in waiting:
        waiting.remove(user_id)
        await message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_kb)
        return

    if user_id in active_chats:
        partner_id = active_chats.get(user_id)
        # —É–¥–∞–ª—è–µ–º –ø–∞—Ä—É –±–µ–∑–æ–ø–∞—Å–Ω–æ
        active_chats.pop(user_id, None)
        if partner_id:
            active_chats.pop(partner_id, None)
            await bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.", reply_markup=main_kb)
        await message.answer("‚ùå –¢—ã –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.", reply_markup=main_kb)
        return

    await message.answer("‚ùó –¢—ã —Å–µ–π—á–∞—Å –Ω–µ –∏—â–µ—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –Ω–µ –≤ —á–∞—Ç–µ.", reply_markup=main_kb)


@dp.message()
async def forward_messages(message: Message):
    user_id = message.from_user.id
    if user_id not in active_chats:
        return
    partner_id = active_chats.get(user_id)
    if not partner_id:
        return
    # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.copy_message(chat_id=partner_id, from_chat_id=message.chat.id, message_id=message.message_id)


async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
